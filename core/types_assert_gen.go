// Generated by gen_types. Don't modify manually!

package core

import (
	"io"
)

func MaybeIsComparable(obj Object) (Comparable, string) {
	if res, yes := obj.(Comparable); yes {
		return res, ""
	}
	return nil, "Comparable"
}

func EnsureObjectIsComparable(obj Object, pattern string) Comparable {
	res, sb := MaybeIsComparable(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsComparable(args []Object, index int) Comparable {
	obj := args[index]
	res, sb := MaybeIsComparable(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsVec(obj Object) (Vec, string) {
	if res, yes := obj.(Vec); yes {
		return res, ""
	}
	return nil, "Vec"
}

func EnsureObjectIsVec(obj Object, pattern string) Vec {
	res, sb := MaybeIsVec(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsVec(args []Object, index int) Vec {
	obj := args[index]
	res, sb := MaybeIsVec(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsChar(obj Object) (Char, string) {
	if res, yes := obj.(Char); yes {
		return res, ""
	}
	return Char{}, "Char"
}

func EnsureObjectIsChar(obj Object, pattern string) Char {
	res, sb := MaybeIsChar(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsChar(args []Object, index int) Char {
	obj := args[index]
	res, sb := MaybeIsChar(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsString(obj Object) (String, string) {
	if res, yes := obj.(String); yes {
		return res, ""
	}
	return String{}, "String"
}

func EnsureObjectIsString(obj Object, pattern string) String {
	res, sb := MaybeIsString(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsString(args []Object, index int) String {
	obj := args[index]
	res, sb := MaybeIsString(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsSymbol(obj Object) (Symbol, string) {
	if res, yes := obj.(Symbol); yes {
		return res, ""
	}
	return Symbol{}, "Symbol"
}

func EnsureObjectIsSymbol(obj Object, pattern string) Symbol {
	res, sb := MaybeIsSymbol(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsSymbol(args []Object, index int) Symbol {
	obj := args[index]
	res, sb := MaybeIsSymbol(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsKeyword(obj Object) (Keyword, string) {
	if res, yes := obj.(Keyword); yes {
		return res, ""
	}
	return Keyword{}, "Keyword"
}

func EnsureObjectIsKeyword(obj Object, pattern string) Keyword {
	res, sb := MaybeIsKeyword(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsKeyword(args []Object, index int) Keyword {
	obj := args[index]
	res, sb := MaybeIsKeyword(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsRegex(obj Object) (*Regex, string) {
	if res, yes := obj.(*Regex); yes {
		return res, ""
	}
	return nil, "Regex"
}

func EnsureObjectIsRegex(obj Object, pattern string) *Regex {
	res, sb := MaybeIsRegex(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsRegex(args []Object, index int) *Regex {
	obj := args[index]
	res, sb := MaybeIsRegex(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsBoolean(obj Object) (Boolean, string) {
	if res, yes := obj.(Boolean); yes {
		return res, ""
	}
	return Boolean{}, "Boolean"
}

func EnsureObjectIsBoolean(obj Object, pattern string) Boolean {
	res, sb := MaybeIsBoolean(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsBoolean(args []Object, index int) Boolean {
	obj := args[index]
	res, sb := MaybeIsBoolean(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsTime(obj Object) (Time, string) {
	if res, yes := obj.(Time); yes {
		return res, ""
	}
	return Time{}, "Time"
}

func EnsureObjectIsTime(obj Object, pattern string) Time {
	res, sb := MaybeIsTime(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsTime(args []Object, index int) Time {
	obj := args[index]
	res, sb := MaybeIsTime(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsNumber(obj Object) (Number, string) {
	if res, yes := obj.(Number); yes {
		return res, ""
	}
	return nil, "Number"
}

func EnsureObjectIsNumber(obj Object, pattern string) Number {
	res, sb := MaybeIsNumber(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsNumber(args []Object, index int) Number {
	obj := args[index]
	res, sb := MaybeIsNumber(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsSeqable(obj Object) (Seqable, string) {
	if res, yes := obj.(Seqable); yes {
		return res, ""
	}
	return nil, "Seqable"
}

func EnsureObjectIsSeqable(obj Object, pattern string) Seqable {
	res, sb := MaybeIsSeqable(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsSeqable(args []Object, index int) Seqable {
	obj := args[index]
	res, sb := MaybeIsSeqable(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsCallable(obj Object) (Callable, string) {
	if res, yes := obj.(Callable); yes {
		return res, ""
	}
	return nil, "Callable"
}

func EnsureObjectIsCallable(obj Object, pattern string) Callable {
	res, sb := MaybeIsCallable(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsCallable(args []Object, index int) Callable {
	obj := args[index]
	res, sb := MaybeIsCallable(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsType(obj Object) (*Type, string) {
	if res, yes := obj.(*Type); yes {
		return res, ""
	}
	return nil, "Type"
}

func EnsureObjectIsType(obj Object, pattern string) *Type {
	res, sb := MaybeIsType(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsType(args []Object, index int) *Type {
	obj := args[index]
	res, sb := MaybeIsType(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsMeta(obj Object) (Meta, string) {
	if res, yes := obj.(Meta); yes {
		return res, ""
	}
	return nil, "Meta"
}

func EnsureObjectIsMeta(obj Object, pattern string) Meta {
	res, sb := MaybeIsMeta(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsMeta(args []Object, index int) Meta {
	obj := args[index]
	res, sb := MaybeIsMeta(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsInt(obj Object) (Int, string) {
	if res, yes := obj.(Int); yes {
		return res, ""
	}
	return Int{}, "Int"
}

func EnsureObjectIsInt(obj Object, pattern string) Int {
	res, sb := MaybeIsInt(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsInt(args []Object, index int) Int {
	obj := args[index]
	res, sb := MaybeIsInt(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsDouble(obj Object) (Double, string) {
	if res, yes := obj.(Double); yes {
		return res, ""
	}
	return Double{}, "Double"
}

func EnsureObjectIsDouble(obj Object, pattern string) Double {
	res, sb := MaybeIsDouble(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsDouble(args []Object, index int) Double {
	obj := args[index]
	res, sb := MaybeIsDouble(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsStack(obj Object) (Stack, string) {
	if res, yes := obj.(Stack); yes {
		return res, ""
	}
	return nil, "Stack"
}

func EnsureObjectIsStack(obj Object, pattern string) Stack {
	res, sb := MaybeIsStack(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsStack(args []Object, index int) Stack {
	obj := args[index]
	res, sb := MaybeIsStack(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsMap(obj Object) (Map, string) {
	if res, yes := obj.(Map); yes {
		return res, ""
	}
	return nil, "Map"
}

func EnsureObjectIsMap(obj Object, pattern string) Map {
	res, sb := MaybeIsMap(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsMap(args []Object, index int) Map {
	obj := args[index]
	res, sb := MaybeIsMap(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsSet(obj Object) (Set, string) {
	if res, yes := obj.(Set); yes {
		return res, ""
	}
	return nil, "Set"
}

func EnsureObjectIsSet(obj Object, pattern string) Set {
	res, sb := MaybeIsSet(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsSet(args []Object, index int) Set {
	obj := args[index]
	res, sb := MaybeIsSet(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsAssociative(obj Object) (Associative, string) {
	if res, yes := obj.(Associative); yes {
		return res, ""
	}
	return nil, "Associative"
}

func EnsureObjectIsAssociative(obj Object, pattern string) Associative {
	res, sb := MaybeIsAssociative(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsAssociative(args []Object, index int) Associative {
	obj := args[index]
	res, sb := MaybeIsAssociative(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsReversible(obj Object) (Reversible, string) {
	if res, yes := obj.(Reversible); yes {
		return res, ""
	}
	return nil, "Reversible"
}

func EnsureObjectIsReversible(obj Object, pattern string) Reversible {
	res, sb := MaybeIsReversible(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsReversible(args []Object, index int) Reversible {
	obj := args[index]
	res, sb := MaybeIsReversible(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsNamed(obj Object) (Named, string) {
	if res, yes := obj.(Named); yes {
		return res, ""
	}
	return nil, "Named"
}

func EnsureObjectIsNamed(obj Object, pattern string) Named {
	res, sb := MaybeIsNamed(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsNamed(args []Object, index int) Named {
	obj := args[index]
	res, sb := MaybeIsNamed(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsComparator(obj Object) (Comparator, string) {
	if res, yes := obj.(Comparator); yes {
		return res, ""
	}
	return nil, "Comparator"
}

func EnsureObjectIsComparator(obj Object, pattern string) Comparator {
	res, sb := MaybeIsComparator(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsComparator(args []Object, index int) Comparator {
	obj := args[index]
	res, sb := MaybeIsComparator(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsRatio(obj Object) (*Ratio, string) {
	if res, yes := obj.(*Ratio); yes {
		return res, ""
	}
	return nil, "Ratio"
}

func EnsureObjectIsRatio(obj Object, pattern string) *Ratio {
	res, sb := MaybeIsRatio(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsRatio(args []Object, index int) *Ratio {
	obj := args[index]
	res, sb := MaybeIsRatio(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsBigFloat(obj Object) (*BigFloat, string) {
	if res, yes := obj.(*BigFloat); yes {
		return res, ""
	}
	return nil, "BigFloat"
}

func EnsureObjectIsBigFloat(obj Object, pattern string) *BigFloat {
	res, sb := MaybeIsBigFloat(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsBigFloat(args []Object, index int) *BigFloat {
	obj := args[index]
	res, sb := MaybeIsBigFloat(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsBigInt(obj Object) (*BigInt, string) {
	if res, yes := obj.(*BigInt); yes {
		return res, ""
	}
	return nil, "BigInt"
}

func EnsureObjectIsBigInt(obj Object, pattern string) *BigInt {
	res, sb := MaybeIsBigInt(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsBigInt(args []Object, index int) *BigInt {
	obj := args[index]
	res, sb := MaybeIsBigInt(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsNamespace(obj Object) (*Namespace, string) {
	if res, yes := obj.(*Namespace); yes {
		return res, ""
	}
	return nil, "Namespace"
}

func EnsureObjectIsNamespace(obj Object, pattern string) *Namespace {
	res, sb := MaybeIsNamespace(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsNamespace(args []Object, index int) *Namespace {
	obj := args[index]
	res, sb := MaybeIsNamespace(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsVar(obj Object) (*Var, string) {
	if res, yes := obj.(*Var); yes {
		return res, ""
	}
	return nil, "Var"
}

func EnsureObjectIsVar(obj Object, pattern string) *Var {
	res, sb := MaybeIsVar(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsVar(args []Object, index int) *Var {
	obj := args[index]
	res, sb := MaybeIsVar(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsError(obj Object) (Error, string) {
	if res, yes := obj.(Error); yes {
		return res, ""
	}
	return nil, "Error"
}

func EnsureObjectIsError(obj Object, pattern string) Error {
	res, sb := MaybeIsError(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsError(args []Object, index int) Error {
	obj := args[index]
	res, sb := MaybeIsError(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsFn(obj Object) (*Fn, string) {
	if res, yes := obj.(*Fn); yes {
		return res, ""
	}
	return nil, "Fn"
}

func EnsureObjectIsFn(obj Object, pattern string) *Fn {
	res, sb := MaybeIsFn(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsFn(args []Object, index int) *Fn {
	obj := args[index]
	res, sb := MaybeIsFn(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsDeref(obj Object) (Deref, string) {
	if res, yes := obj.(Deref); yes {
		return res, ""
	}
	return nil, "Deref"
}

func EnsureObjectIsDeref(obj Object, pattern string) Deref {
	res, sb := MaybeIsDeref(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsDeref(args []Object, index int) Deref {
	obj := args[index]
	res, sb := MaybeIsDeref(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsAtom(obj Object) (*Atom, string) {
	if res, yes := obj.(*Atom); yes {
		return res, ""
	}
	return nil, "Atom"
}

func EnsureObjectIsAtom(obj Object, pattern string) *Atom {
	res, sb := MaybeIsAtom(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsAtom(args []Object, index int) *Atom {
	obj := args[index]
	res, sb := MaybeIsAtom(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsRef(obj Object) (Ref, string) {
	if res, yes := obj.(Ref); yes {
		return res, ""
	}
	return nil, "Ref"
}

func EnsureObjectIsRef(obj Object, pattern string) Ref {
	res, sb := MaybeIsRef(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsRef(args []Object, index int) Ref {
	obj := args[index]
	res, sb := MaybeIsRef(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsKVReduce(obj Object) (KVReduce, string) {
	if res, yes := obj.(KVReduce); yes {
		return res, ""
	}
	return nil, "KVReduce"
}

func EnsureObjectIsKVReduce(obj Object, pattern string) KVReduce {
	res, sb := MaybeIsKVReduce(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsKVReduce(args []Object, index int) KVReduce {
	obj := args[index]
	res, sb := MaybeIsKVReduce(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsReduce(obj Object) (Reduce, string) {
	if res, yes := obj.(Reduce); yes {
		return res, ""
	}
	return nil, "Reduce"
}

func EnsureObjectIsReduce(obj Object, pattern string) Reduce {
	res, sb := MaybeIsReduce(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsReduce(args []Object, index int) Reduce {
	obj := args[index]
	res, sb := MaybeIsReduce(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsPending(obj Object) (Pending, string) {
	if res, yes := obj.(Pending); yes {
		return res, ""
	}
	return nil, "Pending"
}

func EnsureObjectIsPending(obj Object, pattern string) Pending {
	res, sb := MaybeIsPending(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsPending(args []Object, index int) Pending {
	obj := args[index]
	res, sb := MaybeIsPending(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsFile(obj Object) (*File, string) {
	if res, yes := obj.(*File); yes {
		return res, ""
	}
	return nil, "File"
}

func EnsureObjectIsFile(obj Object, pattern string) *File {
	res, sb := MaybeIsFile(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsFile(args []Object, index int) *File {
	obj := args[index]
	res, sb := MaybeIsFile(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsio_Reader(obj Object) (io.Reader, string) {
	if res, yes := obj.(io.Reader); yes {
		return res, ""
	}
	return nil, "io.Reader"
}

func EnsureObjectIsio_Reader(obj Object, pattern string) io.Reader {
	res, sb := MaybeIsio_Reader(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsio_Reader(args []Object, index int) io.Reader {
	obj := args[index]
	res, sb := MaybeIsio_Reader(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsio_Writer(obj Object) (io.Writer, string) {
	if res, yes := obj.(io.Writer); yes {
		return res, ""
	}
	return nil, "io.Writer"
}

func EnsureObjectIsio_Writer(obj Object, pattern string) io.Writer {
	res, sb := MaybeIsio_Writer(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsio_Writer(args []Object, index int) io.Writer {
	obj := args[index]
	res, sb := MaybeIsio_Writer(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsStringReader(obj Object) (StringReader, string) {
	if res, yes := obj.(StringReader); yes {
		return res, ""
	}
	return nil, "StringReader"
}

func EnsureObjectIsStringReader(obj Object, pattern string) StringReader {
	res, sb := MaybeIsStringReader(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsStringReader(args []Object, index int) StringReader {
	obj := args[index]
	res, sb := MaybeIsStringReader(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsio_RuneReader(obj Object) (io.RuneReader, string) {
	if res, yes := obj.(io.RuneReader); yes {
		return res, ""
	}
	return nil, "io.RuneReader"
}

func EnsureObjectIsio_RuneReader(obj Object, pattern string) io.RuneReader {
	res, sb := MaybeIsio_RuneReader(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsio_RuneReader(args []Object, index int) io.RuneReader {
	obj := args[index]
	res, sb := MaybeIsio_RuneReader(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsChannel(obj Object) (*Channel, string) {
	if res, yes := obj.(*Channel); yes {
		return res, ""
	}
	return nil, "Channel"
}

func EnsureObjectIsChannel(obj Object, pattern string) *Channel {
	res, sb := MaybeIsChannel(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsChannel(args []Object, index int) *Channel {
	obj := args[index]
	res, sb := MaybeIsChannel(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsCountedIndexed(obj Object) (CountedIndexed, string) {
	if res, yes := obj.(CountedIndexed); yes {
		return res, ""
	}
	return nil, "CountedIndexed"
}

func EnsureObjectIsCountedIndexed(obj Object, pattern string) CountedIndexed {
	res, sb := MaybeIsCountedIndexed(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsCountedIndexed(args []Object, index int) CountedIndexed {
	obj := args[index]
	res, sb := MaybeIsCountedIndexed(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsGoObject(obj Object) (GoObject, string) {
	if res, yes := obj.(GoObject); yes {
		return res, ""
	}
	return GoObject{}, "GoObject"
}

func EnsureObjectIsGoObject(obj Object, pattern string) GoObject {
	res, sb := MaybeIsGoObject(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsGoObject(args []Object, index int) GoObject {
	obj := args[index]
	res, sb := MaybeIsGoObject(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}

func MaybeIsValuable(obj Object) (Valuable, string) {
	if res, yes := obj.(Valuable); yes {
		return res, ""
	}
	return nil, "Valuable"
}

func EnsureObjectIsValuable(obj Object, pattern string) Valuable {
	res, sb := MaybeIsValuable(obj)
	if sb == "" {
		return res
	}
	panic(FailObject(obj, sb, pattern))
}

func EnsureArgIsValuable(args []Object, index int) Valuable {
	obj := args[index]
	res, sb := MaybeIsValuable(obj)
	if sb == "" {
		return res
	}
	panic(FailArg(obj, sb, index))
}
