(ns joker.test.run-eval-tests
  (:use joker.test))

(defn slurp-or
  [path alt]
  (try
    (slurp path)
    (catch Error e
      alt)))

(def exit-code 0)

(defn have-option
  "Quick and dirty options parser."
  [opt]
  (some #(= opt %) *command-line-args*))

(def verbose (or (have-option "--verbose")
                 (have-option "-v")
                 (not (have-option "--no-verbose"))))

;; Directories have input.joke files that are passed as input to a
;; fork'ed instance of Joker.  Ths test harness is rudimentary but
;; handles more complicated cases than joker.test and can also catch
;; test failures in that and its dependencies (such as defmulti,
;; joker.template, and joker.walk) before a huge deluge of failures is
;; reported by the per-file tests that are performed after these.
(let [test-dirs (->> (joker.os/ls "tests/eval")
                     (filter :dir?)
                     (map :name)
                     (remove #(joker.string/starts-with? % ".")))
      pwd (get (joker.os/env) "PWD")
      exe (str pwd "/joker")]
  (doseq [test-dir test-dirs]
    (when verbose
      (println (str "Running subtest " test-dir)))
    (let [dir (str "tests/eval/" test-dir "/")
          filename "input.joke"
          res (joker.os/sh-from dir exe filename) ; Someday add: :in "input.txt" (no :in support yet)
          out (:out res)
          err (:err res)
          rc (:exit res)
          expected-out (slurp-or (str dir "stdout.txt") "")
          expected-err (slurp-or (str dir "stderr.txt") "")
          expected-rc (if-let [rc (slurp-or (str dir "rc.txt") false)]
                        (int (bigint (with-in-str rc (read-line))))
                        0)]
      (when-not (and (= expected-out out) (= expected-err err) (= expected-rc rc))
        (println "FAILED:" test-dir)
        (when-not (= expected-out out)
          (println "EXPECTED STDOUT:")
          (println "----------------")
          (println expected-out)
          (println "----------------")
          (newline)
          (println "ACTUAL STDOUT:")
          (println "----------------")
          (println out)
          (println "----------------"))
        (when-not (= expected-err err)
          (println "EXPECTED STDERR:")
          (println "----------------")
          (println expected-err)
          (println "----------------")
          (newline)
          (println "ACTUAL STDERR:")
          (println "----------------")
          (println err)
          (println "----------------"))
        (when-not (= expected-rc rc)
          (println "EXPECTED RC:" expected-rc)
          (println "ACTUAL RC:" rc))
        (var-set #'exit-code 1)))))

;; Load all the tests/eval/*.joke files:
(let [test-files (->> (joker.os/ls "tests/eval")
                      (remove :dir?)
                      (map :name)
                      (filter #(joker.string/ends-with? % ".joke"))
                      (remove #(joker.string/starts-with? % ".")))]
  (doseq [test-file test-files]
    (binding [*ns* *ns*]
      (load-file (str "tests/eval/" test-file)))))

;; Run the loaded tests.
(let [res (run-all-tests)]
  (when (< 0 (+ (:fail res) (:error res)))
    (println "There were failures and/or errors; returning exit code 1")
    (var-set #'exit-code 1)))

(joker.os/exit exit-code)
